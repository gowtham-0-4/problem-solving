Longest padindromic string 

#include<bits/stdc++.h>
using namespace std;

    
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
  int j=0,k=0;
  int q=0,m=0;
  int length=INT_MIN;
  int start=0,end=1;
  for (int i=0; i<n; i++){
    j=i;
    k=1;
    while ((j+k)<n && (j-k)>=0 && s[j+k]==s[j-k]){
      int p=(j+k)-(j-k);
      if (length<p){
        length=p;
        start=j-k;
        end=p+1;
      }
          k++;

    }
    q=j;
    m=q+1;

    while ((m)<n && (q)>=0 && s[q]==s[m]){

      int p=m-q;
      if (length<p){
        length=p;
        start=q;
        end=p+1;
      }
          q=q-1;
          m++;
      
    }
  }
  return (s.substr(start,end));
  
    }
};

Longest palindromic substring 2 

int n=s.size();
  int length=0;

 string ans="";
    string z="";
    string v="";
  
  for (int i=0; i<n; i++){
   
    for (int j=i; j<n; j++){
      ans=s.substr(i,j-i+1);
      z=ans;
       reverse(ans.begin(),ans.end());
      if (z==ans){
        if (length<z.size() && length!=z.size()){
          length=z.size();
          v=z;
        }
      }


    }
  }
        return v;

sort characters by frequency

#include <bits/stdc++.h>
using namespace std;

  bool comp(pair<int ,char > a, pair<int,char> b){
if (a.first>b.first){
return true;
  }
  else if ((a.first<b.first) && (a.first!=b.first) ){
    return false;
  }
  return  (a.second<b.second);
}

class Solution {
public:
    string frequencySort(string s) {
        string a=s;
        int n=a.size();
   
   pair<int,char>f[62];
   
for (int i=0; i<26; i++){
  f[i]={0,i+'a'};
  f[i+26]={0,i+'A'};
  
}
for (int i=0; i<=9; i++){
  f[i+52]={0,i+'0'};
}
for (auto val:a){//initializing the frequency
  if (val>='a' && val<='z'){
    f[val-'a'].first++;
  }
else if (val>='A' && val<='Z'){
    f[val-'A'+26].first++;
  
}
else if (val>='0' && val<='9'){
  f[val-'0'+52].first++;
}

}
string ans="";
sort(f+0,f+62,comp);
for (int i=0; i<62; i++){
  if (f[i].first>=1){
    int p=f[i].first;
    while (p!=0){
      ans+=f[i].second;
      p--;
    }
  }
  else {
    break;
  }
}
return ans;

        
    }
};

Rotate string

Input: s = "abcde", goal = "cdeab"
Output: true

#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    bool rotateString(string s, string goal) {
        if (s.size()!=goal.size())return false;
        string p=s+s;
        if (p.find(goal)!=string::npos){
            return true;
        }
        else{
            return false;
        }
        
    }
};

Largest substring of a odd number in a string 

#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    string largestOddNumber(string num) {
  int n=num.length();
  int i=0,j=n-1;
  
  while (j>=0){
    if (num[i]==0){
      i++;
    }
    if (num[j]%2!=0){
      break;
      
    }
        else if (num[j]%2==0){
          if (j==0){
            j=-1;
            break;
          }
          j--;

  
  }
  
}

return num.substr(i,j-i+1);
    
    }
};

Valid anagram 

class Solution {
public:
    bool isAnagram(string s, string t) {
         int  n =s.size();
         int m=t.size();
         if (m!=n)return false;
   int hash[26]={0};
   int hashing[26]={0};
   
   for (int i=0; i<n;  i++){
     hash[s[i]-'a']++;
     hashing[t[i]-'a']++;
     
   }
   
   for (int i=0; i<26; i++){
     if (hash[i]!=hashing[i]) {
       return false;
     }
   }
   return true;
    }
};

Longest common prefix 

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {

        if (strs.empty()){
            return "";
        }

        sort(strs.begin(),strs.end());

        string n=strs[strs.size()-1];
        string m=strs[0];
string ans="";
        int len=min(n.size(),m.size());

        for (int i=0; i<len ; i++){
            if (n[i]!=m[i]){
                break;
            }
            else {
                ans+=n[i];
            }
        }
        return ans;

        
    }
};

Isomorphic strings 

class Solution {
public:
    bool isIsomorphic(string s, string t) {
       map<char,char>mpp;
map<char,char>mpp1;
string a=s;
string b=t;
for (int i=0; i<a.length(); i++){
   if (mpp.find(a[i])!=mpp.end()){
     if (mpp[a[i]]!=b[i]){
        return false;
     }
   }
     else {
       mpp[a[i]]=b[i];
     }
     
     if (mpp1.find(b[i])!=mpp1.end()){
       if (mpp1[b[i]]!=a[i]){
        return false;
         break;
       }
     }
       else {
         mpp1[b[i]]=a[i];
       }
     }
     

  

     return true;
    }
};

Reverse words in a string 

class Solution {
public:
    string reverseWords(string s) {
        int n=s.length();
  int i=0,j=0;
  int start,end;
  reverse(s.begin(),s.end());
while (i<n){
      while (s[j]==' '){
        j++;
      }
      if (j>=n){
        break;
      }
      start=i;
      while (j<n && s[j]!=' '){
        s[i]=s[j];
        i++;
        j++;
      }
      s[i]=' ';
      i++;
      end=i-1;
reverse(s.begin()+start,s.begin()+end);
      
}

return s.substr(0,i-1);

  
        
    }
};

Reverse words in string 2

#include <bits/stdc++.h>
using namespace std;
string reverseString(string &str){
    

  string s=str;
  
  int n=s.length();
  int i=0,j=0;
vector<string>q;
while (i<n){
      while (s[i]==' '){
        i++;
      }
      if (i>=n){
        break;
      }
      j=i;
      while (j<n && s[j]!=' '){
        j++;
      }
      
q.push_back(s.substr(i,j-i));

  i=j;
}
string result="";
for (int j=q.size()-1; j>=0; j--){
  if (!result.empty()){
    result+=' ';
      result+=q[j];

    
  }
  else {
          result+=q[j];

    
  }
}
return result;

  

    // Write your code here.    
}

Valid parenthesis 

class Solution {
public:
    bool isValid(string s) {
        stack<char>st;
        bool check=false;
        for (int i=0; i<s.size(); i++){
            if (s[i]=='(' || s[i]=='{' || s[i]=='['){
                st.push(s[i]);
            }
         else if ((s[i]==')' || s[i]=='}' || s[i]==']') && (!st.empty())){
            char ch=st.top();
            st.pop();
            if ((s[i]==')' && ch=='(') ||( s[i]=='}' && ch=='{') || (s[i]==']' && ch=='[')){
                check=true;
            }
            else {
                return false;
            }
          
         }
         else {
            return false;
         }
         

        }
        if (check==true && st.empty()){
    return true;

        }
        else {
            return false;
        }
    }
};

Minimum number of swaps to make the string balanced

class Solution {
public:
    int minSwaps(string s) {
  int open=0,close=0;
  for (int i=0; i<s.size(); i++){
    if (s[i]=='['){
      open++;

    }
    else if (s[i]==']'){
        if (open>0){
        open--;

      }
       else {
      close ++;

    }
    
      
    }
   
   
  }
  return (open+1)/2;
  }
  
};

Word pattern \

class Solution {
public:
    bool wordPattern(string pattern, string s) {

  string a=pattern;
  string b=s;
  vector<string >c;
  int i=0, j=0;
  map<char,string>mpp;
  map<string,char>mpp1;
  while (i<b.size()){
    while (j<b.size() && b[j]!=' '){
      j++;
    }
    
    c.push_back ( b.substr(i,j-i));
    while (j<b.size() && b[j]==' '){
      j++;
    }
    i=j;
  }
if (a.size()!=c.size()){
    return false;
}
  for (int i=0; i<c.size(); i++){
    
    if (mpp.find(a[i])!=mpp.end()){
      if( (mpp[a[i]])!=c[i]){
        return false;
      }
    
    }
      else {
        mpp[a[i]]=c[i];
      }
    if (mpp1.find(c[i])!=mpp1.end()){
      if( (mpp1[c[i]])!=a[i]){
        return false;
      }
      
    }
    else {
        mpp1[c[i]]=a[i];
      }
    
  }
        return true;
    }
};

sum of beauty of all substrings 

#include<bits/stdc++.h>
using namespace std;



class Solution {
public:
    int beautySum(string s) {
        string a=s;
        int n=a.length();
  int i=0,j=0,sum=0;
  while (i<n){
    
    while (j<n){
int hash[26]={0};
      if (i!=j){
        int s=i;
       for (int i=s; i<=j; i++){
         hash[a[i]-'a']+=1;
       }
       for (int i=0; i<26 ; i++){
       }
   
        
        int maxi=INT_MIN;
        int mini=INT_MAX;
        for (int i=0; i<26; i++){
           maxi=max(maxi,hash[i]);
           if (hash[i]!=0){
              mini=min(mini,hash[i]);

             
           }
          
        }
        int k=maxi-mini;
        if (k!=0){
          sum+=k;
        }
  

       
        
      }
      j++;
      
    }
    i++;
    j=i;
  }
return sum;        
    }
};

sum of beauty of all substring // brute force

class Solution {
public:
    int beautySum(string s) {
   

  string a=s;
  int n=a.length();
  int i=0,j=0,sum=0;
  while (i<n){
    
    while (j<n){
      string ans="";
map<char,int>mpp;

      if (i!=j){
        
        int s=i;
        while (s<=j && s<n && j<n ){
          mpp[a[s]]+=1;
          s++;
        }
        int maxi=INT_MIN;
        int mini=INT_MAX;
        for  (auto val:mpp){
           maxi = max(maxi, val.second);
                mini = min(mini, val.second);
        }
      int k=maxi-mini;
      if (k!=0){
                  sum+=k;

        
      }

        
  

       
        
      }
      j++;
      
    }
    i++;
    j=i;
  }
  return sum;

        
    }
};

convert string to attoi 
#include<bits/stdc++.h>
using namespace std;
int ato(string s){
    int n=s.size();
  long long ans=0;
  int i=0;
  bool check=true;
  int mini=INT_MIN;
  int maxi=INT_MAX;
  
   while (s[i]==' '){
    i++;
  }
  if ((i+1)<n && ((s[i]=='+' || s[i]=='-') && (s[i+1]=='+' || s[i+1]=='-'))){
    return 0;
  }
  if (s[i]=='-'){
    check=false;
  }
  if (s[i]=='+' || s[i]=='-'){
    i++;
  }
  while (s[i]=='0'){
    i++;
  }
  
  if (s[i]=='-'|| s[i]=='+'|| s[i]==' '|| s[i]=='.'){
    return 0;
  }
  while (i<n){
    if (s[i]>='0' && s[i]<='9'){
      long long x=s[i]-'0';
      
      ans=ans*10 +(x%10);
      cout<<ans<<endl;
      
      if (ans<=mini || ans>=maxi){
        break;
      }
      i++;
    }
    else if (s[i]==' '){
      i++;
    }
    else {
      break;
    }
  }
  if (check==false){
    ans =ans*-1;
    cout<<ans<<endl;
  }
  if (ans<=mini){
    return INT_MIN;
  }
  if (ans>=maxi){
    return INT_MAX;
  }
  return (int)ans;
}

int main(){
  string s="21474836460";
 int x= ato(s);
 cout<<x<<endl;

  
 
}

