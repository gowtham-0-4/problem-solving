Longest padindromic string 
#include<bits/stdc++.h>
using namespace std;

    
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
  int j=0,k=0;
  int q=0,m=0;
  int length=INT_MIN;
  int start=0,end=1;
  for (int i=0; i<n; i++){
    j=i;
    k=1;
    while ((j+k)<n && (j-k)>=0 && s[j+k]==s[j-k]){
      int p=(j+k)-(j-k);
      if (length<p){
        length=p;
        start=j-k;
        end=p+1;
      }
          k++;

    }
    q=j;
    m=q+1;

    while ((m)<n && (q)>=0 && s[q]==s[m]){

      int p=m-q;
      if (length<p){
        length=p;
        start=q;
        end=p+1;
      }
          q=q-1;
          m++;
      
    }
  }
  return (s.substr(start,end));
  
    }
};

Longest palindromic substring 2 
int n=s.size();
  int length=0;

 string ans="";
    string z="";
    string v="";
  
  for (int i=0; i<n; i++){
   
    for (int j=i; j<n; j++){
      ans=s.substr(i,j-i+1);
      z=ans;
       reverse(ans.begin(),ans.end());
      if (z==ans){
        if (length<z.size() && length!=z.size()){
          length=z.size();
          v=z;
        }
      }


    }
  }
        return v;
