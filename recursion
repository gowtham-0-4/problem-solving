recursive implemention of attoi

#include<bits/stdc++.h>
using namespace std;

long long recur(string s, int i, long long ans,int n){
  if (i>=n){
    return ans;
  }
    
    if (s[i]>='0' && s[i]<='9'){
      long long x=s[i]-'0';
      
      ans=ans*10 +(x%10);
      
      if (ans<=INT_MIN || ans>=INT_MAX){
        return ans;
      }
      return recur(s,i+1,ans,n);
    }
   
    else {
      return ans;
    }
  
  
}
int zeros(string s,int i){
  if ( s[i]=='0'){
    return zeros(s,i+1);
  }
  else {

    return i;
  }
}

int spaces(string s,int i){
  if (s[i]==' '){
    return spaces(s,i+1);
  }
  else {

    return i;
  }
}
int ato(string s){
    int n=s.size();
  long long ans=0;
  int j=0;
  bool check=true;
  int mini=INT_MIN;
  int maxi=INT_MAX;
  
   int i=spaces(s,j);
  if ((i+1)<n && ((s[i]=='+' || s[i]=='-') && (s[i+1]=='+' || s[i+1]=='-'))){
    return 0;
  }
  if (s[i]=='-'){
    check=false;
  }
  if (s[i]=='+' || s[i]=='-'){
    i++;
  }
  
  int m=zeros(s,i);
  
  i=m;
  
  if (s[i]=='-'|| s[i]=='+'|| s[i]==' '|| s[i]=='.'){
    return 0;
  }
  
  long z=recur(s, i ,ans,n);
  cout<<"Z  "<<z<<endl;

  if (check==false){
    z =z*-1;
    cout<<z<<endl;
  }
  if (z<=mini){
    return INT_MIN;
  }
  if (z>=maxi){
    return INT_MAX;
  }
  return (int)z;
}

int main(){
  string s="  ";
 int x= ato(s);
 cout<<x<<endl;

  
 
}
