recursive implemention of attoi

#include<bits/stdc++.h>
using namespace std;

long long recur(string s, int i, long long ans,int n){
  if (i>=n){
    return ans;
  }
    
    if (s[i]>='0' && s[i]<='9'){
      long long x=s[i]-'0';
      
      ans=ans*10 +(x%10);
      
      if (ans<=INT_MIN || ans>=INT_MAX){
        return ans;
      }
      return recur(s,i+1,ans,n);
    }
   
    else {
      return ans;
    }
  
  
}
int zeros(string s,int i){
  if ( s[i]=='0'){
    return zeros(s,i+1);
  }
  else {

    return i;
  }
}

int spaces(string s,int i){
  if (s[i]==' '){
    return spaces(s,i+1);
  }
  else {

    return i;
  }
}
int ato(string s){
    int n=s.size();
  long long ans=0;
  int j=0;
  bool check=true;
  int mini=INT_MIN;
  int maxi=INT_MAX;
  
   int i=spaces(s,j);
  if ((i+1)<n && ((s[i]=='+' || s[i]=='-') && (s[i+1]=='+' || s[i+1]=='-'))){
    return 0;
  }
  if (s[i]=='-'){
    check=false;
  }
  if (s[i]=='+' || s[i]=='-'){
    i++;
  }
  
  int m=zeros(s,i);
  
  i=m;
  
  if (s[i]=='-'|| s[i]=='+'|| s[i]==' '|| s[i]=='.'){
    return 0;
  }
  
  long z=recur(s, i ,ans,n);
  cout<<"Z  "<<z<<endl;

  if (check==false){
    z =z*-1;
    cout<<z<<endl;
  }
  if (z<=mini){
    return INT_MIN;
  }
  if (z>=maxi){
    return INT_MAX;
  }
  return (int)z;
}

int main(){
  string s="  ";
 int x= ato(s);
 cout<<x<<endl;

  
 
}
pow(x,n)

class Solution {
public:


long double recur(long double x, long long n,long double ans ){
  if (n<=0){
    return ans;
  }
  if (n%2!=0){
    ans=ans*x;
    cout<<ans<<endl;
    n=n-1;
            return recur(x,n,ans);

  }
  else {
    x=x*x;
    n=n/2;
        return recur(x,n,ans);

  }
}
    double myPow(double x, int n) {
         int count=1;
  long double ans=1;
  if (n==0){
    return 1;
  }
  
if (n>0){
      long double z=recur(x,n,ans);
      return z;

  }
  else {
    long long p=n;
    long long q=p*-1;
    
          long   double z=recur(x,q,ans);
          
          long   double m=1/z;
          return m;

    
  }
  
        
    }
};

sort a stack 

/*The structure of the class is
class SortedStack{
public:
	stack<int> s;
	void sort();
};
*/

/* The below method sorts the stack s 
you are required to complete the below method */

  void rev(stack<int>& stack, vector<int>z,int i){
  if (i>=z.size()){
    return ;
  }
  else {
    stack.push(z[i]);
    i=i+1;
    return rev(stack,z,i);
    
  }
  
}

vector<int>recur(stack<int>& stack, vector<int>temp){
  if (stack.empty()){
    return temp;
  }
  else {
     auto p=stack.top();
    stack.pop();
    temp.push_back(p);
    return recur(stack,temp);
  }
  
  
}
void SortedStack :: sort()
{
     vector<int>temp;
  vector<int>z=recur(s,temp);
  std::sort(z.begin(),z.end());
 int i=0;
 rev(s,z,i);
  
   //Your code here
}

reverse a stack
#include<bits/stdc++.h>
using namespace std;
void insert(stack<int> &stack,int val){
    if (stack.empty()){
        stack.push(val);
        return ;
    }
    auto num=stack.top();
    stack.pop();
    insert(stack,val);
    stack.push(num);
    return;
}

void rev(stack<int>& stack){
    if (stack.empty()){
        return ;
    }
    auto p=stack.top();
    stack.pop();
    rev(stack);
    insert(stack,p);
    return;
}
void reverseStack(stack<int> &stack) {

    rev(stack);
    // Write your code here
}

generate parenthesis
#include<bits/stdc++.h>
using namespace std;


void g(vector<string>&result,string s, int n){
    if (s.size()==(n*2)){
      int open=0,close=0,i=0;
      while (i<s.size()){
        if (s[i]=='('){
          open++;
      }
      else{
        if (open>0){
          open--;
        }
        else{
          close++;
        }
      }
      i++;
      }
      if (open==0 && close ==0){
        result.push_back(s);

      }
        return ;
    }
    else {
      g(result,s+'(',n);
          
          g(result,s+')',n);
          return;
      
    }
          

    

      
        

}
vector<string>q(int n){
    vector<string>result;
string s="";
 g(result,s,n);
 return result;

}

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string>w=q(n);
        return w;
        
    }
};

generate all binary strings without consequtive 1s
#include<bits/stdc++.h>
using namespace std;

void g(vector<string>&result,string s, int n){
    if (s.size()==n){
        result.push_back(s);
        return ;
    }
    if (!s.empty() && s[s.size()-1]=='1'){
        string r=s+'0';
         g(result,r,n);
    }
      else if (s.empty() || s[s.size()-1]=='0'){
        string p=s+'0';
          g(result,p,n);
         string q=s+'1';
          g(result,q,n);

    }

      
        

}
vector<string>q(int n){
    vector<string>result;
string s="";
 g(result,s,n);
 return result;

}

vector<string> generateString(int N) {

vector<string>w=q(N);

return w;
    // Write your code here.
}
